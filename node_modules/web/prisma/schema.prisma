// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Profiles - Extended user information
model UserProfile {
  id                Int      @id @default(autoincrement())
  userId            String   @unique @map("user_id")
  fullName          String   @map("full_name")
  email             String   @unique
  role              UserRole @default(student)
  learningLevel     LearningLevel @default(beginner) @map("learning_level")
  avatarUrl         String?  @map("avatar_url")
  bio               String?
  dateOfBirth       DateTime? @map("date_of_birth")
  location          String?
  phone             String?
  preferredLanguage String   @default("en") @map("preferred_language")
  timezone          String   @default("UTC")
  isActive          Boolean  @default(true) @map("is_active")
  emailVerified     Boolean  @default(false) @map("email_verified")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  teacherApplication TeacherApplication?
  userProgress      UserProgress[]
  groupMemberships  GroupMembership[]
  groupDiscussions  GroupDiscussion[]
  createdGroups     StudyGroup[] @relation("GroupCreator")
  createdCourses    Course[] @relation("CourseCreator")
  discussionForums  DiscussionForum[] @relation("ForumCreator")
  forumTopics       ForumTopic[] @relation("TopicAuthor")
  forumReplies      ForumReply[] @relation("ReplyAuthor")
  messagesSent      Message[] @relation("MessageSender")
  messagesReceived  Message[] @relation("MessageReceiver")
  groupChatMessages GroupChatMessage[] @relation("GroupMessageSender")
  liveChatSessions  LiveChatSession[] @relation("ChatUser")
  liveChatSessionsAgent LiveChatSession[] @relation("ChatAgent")
  liveChatMessages  LiveChatMessage[] @relation("LiveChatSender")
  lessonMaterials   LessonMaterial[] @relation("MaterialUploader")
  assignments       Assignment[] @relation("AssignmentCreator")
  assignmentSubmissions AssignmentSubmission[] @relation("SubmissionStudent")
  assignmentSubmissionsGraded AssignmentSubmission[] @relation("SubmissionGrader")
  grades            Grade[] @relation("GradeStudent")
  gradesGraded      Grade[] @relation("GradeGrader")
  calendarEvents    CalendarEvent[] @relation("EventCreator")
  fileUploads       FileUpload[] @relation("FileUploader")
  searchHistory     SearchHistory[]
  lessons           Lesson[] @relation("LessonCreator")
  notifications     Notification[]

  @@map("user_profiles")
}

// Teacher Applications
model TeacherApplication {
  id               Int      @id @default(autoincrement())
  userId           String   @unique @map("user_id")
  fullName         String   @map("full_name")
  email            String
  qualifications   String
  experienceYears  Int      @map("experience_years")
  teachingSubjects String[] @map("teaching_subjects")
  coverLetter      String   @map("cover_letter")
  status           ApplicationStatus @default(pending)
  rejectionReason  String?  @map("rejection_reason")
  appliedAt        DateTime @default(now()) @map("applied_at")
  reviewedAt       DateTime? @map("reviewed_at")
  reviewedBy       String?  @map("reviewed_by")

  // Relations
  user UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("teacher_applications")
}

// Courses
model Course {
  id             Int      @id @default(autoincrement())
  title          String
  description    String?
  level          LearningLevel @default(beginner)
  durationWeeks Int      @default(4) @map("duration_weeks")
  totalLessons  Int      @default(0) @map("total_lessons")
  thumbnailUrl  String?  @map("thumbnail_url")
  isActive       Boolean  @default(true) @map("is_active")
  createdBy      String   @map("created_by")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  creator UserProfile @relation("CourseCreator", fields: [createdBy], references: [userId])
  userProgress UserProgress[]
  lessons      Lesson[]
  grades       Grade[]
  calendarEvents CalendarEvent[]

  @@map("courses")
}

// User Progress Tracking
model UserProgress {
  id                 Int      @id @default(autoincrement())
  userId             String   @map("user_id")
  courseId           Int      @map("course_id")
  progressPercentage Decimal  @default(0) @db.Decimal(5,2) @map("progress_percentage")
  completedLessons   Int      @default(0) @map("completed_lessons")
  totalLessons       Int      @default(0) @map("total_lessons")
  lastAccessed       DateTime @default(now()) @map("last_accessed")
  completedAt        DateTime? @map("completed_at")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relations
  user   UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  course Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("user_progress")
}

// Study Groups
model StudyGroup {
  id              Int      @id @default(autoincrement())
  name            String
  description     String?
  creatorId       String   @map("creator_id")
  learningLevel   LearningLevel @default(beginner) @map("learning_level")
  isPublic        Boolean  @default(true) @map("is_public")
  maxMembers      Int      @default(50) @map("max_members")
  currentMembers  Int      @default(0) @map("current_members")
  groupImageUrl   String?  @map("group_image_url")
  meetingSchedule String?  @map("meeting_schedule")
  meetingLink     String?  @map("meeting_link")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  creator         UserProfile @relation("GroupCreator", fields: [creatorId], references: [userId])
  memberships     GroupMembership[]
  discussions     GroupDiscussion[]
  groupChatMessages GroupChatMessage[]
  calendarEvents  CalendarEvent[]

  @@map("study_groups")
}

// Group Memberships
model GroupMembership {
  id        Int      @id @default(autoincrement())
  groupId   Int      @map("group_id")
  userId    String   @map("user_id")
  role      GroupRole @default(member)
  joinedAt  DateTime @default(now()) @map("joined_at")
  isActive  Boolean  @default(true) @map("is_active")

  // Relations
  group StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_memberships")
}

// Group Discussions
model GroupDiscussion {
  id        Int      @id @default(autoincrement())
  groupId   Int      @map("group_id")
  userId    String   @map("user_id")
  content   String
  parentId  Int?     @map("parent_id")
  isPinned  Boolean  @default(false) @map("is_pinned")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  group     StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  parent    GroupDiscussion? @relation("DiscussionReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   GroupDiscussion[] @relation("DiscussionReplies")

  @@map("group_discussions")
}

// Live Sessions
model LiveSession {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  teacherId   String   @map("teacher_id")
  courseId    Int?     @map("course_id")
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  meetingLink String?  @map("meeting_link")
  maxStudents Int      @default(20) @map("max_students")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("live_sessions")
}

// Discussion Forums
model DiscussionForum {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  category    String   @default("general")
  isActive    Boolean  @default(true) @map("is_active")
  isPinned    Boolean  @default(false) @map("is_pinned")
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  creator     UserProfile @relation("ForumCreator", fields: [createdBy], references: [userId])
  topics      ForumTopic[]

  @@map("discussion_forums")
}

// Forum Topics
model ForumTopic {
  id          Int      @id @default(autoincrement())
  forumId     Int      @map("forum_id")
  title       String
  content     String
  authorId    String   @map("author_id")
  isPinned    Boolean  @default(false) @map("is_pinned")
  isLocked    Boolean  @default(false) @map("is_locked")
  viewCount   Int      @default(0) @map("view_count")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  forum       DiscussionForum @relation(fields: [forumId], references: [id], onDelete: Cascade)
  author      UserProfile @relation("TopicAuthor", fields: [authorId], references: [userId])
  replies     ForumReply[]

  @@map("forum_topics")
}

// Forum Replies
model ForumReply {
  id          Int      @id @default(autoincrement())
  topicId     Int      @map("topic_id")
  authorId    String   @map("author_id")
  content     String
  parentId    Int?     @map("parent_id")
  isSolution  Boolean  @default(false) @map("is_solution")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  topic       ForumTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  author      UserProfile @relation("ReplyAuthor", fields: [authorId], references: [userId])
  parent      ForumReply? @relation("ReplyReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     ForumReply[] @relation("ReplyReplies")

  @@map("forum_replies")
}

// In-App Messaging
model Message {
  id          Int      @id @default(autoincrement())
  senderId    String   @map("sender_id")
  receiverId  String   @map("receiver_id")
  content     String
  messageType String   @default("text") @map("message_type") // text, image, file
  isRead      Boolean  @default(false) @map("is_read")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  sender      UserProfile @relation("MessageSender", fields: [senderId], references: [userId])
  receiver    UserProfile @relation("MessageReceiver", fields: [receiverId], references: [userId])

  @@map("messages")
}

// Group Chat Messages
model GroupChatMessage {
  id          Int      @id @default(autoincrement())
  groupId     Int      @map("group_id")
  senderId    String   @map("sender_id")
  content     String
  messageType String   @default("text") @map("message_type")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  group       StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  sender      UserProfile @relation("GroupMessageSender", fields: [senderId], references: [userId])

  @@map("group_chat_messages")
}

// Live Chat Support Sessions
model LiveChatSession {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  agentId     String?  @map("agent_id")
  status      String   @default("waiting") // waiting, active, closed
  startedAt   DateTime @default(now()) @map("started_at")
  endedAt     DateTime? @map("ended_at")
  rating      Int?     // 1-5 rating

  // Relations
  user        UserProfile @relation("ChatUser", fields: [userId], references: [userId])
  agent       UserProfile? @relation("ChatAgent", fields: [agentId], references: [userId])
  messages    LiveChatMessage[]

  @@map("live_chat_sessions")
}

// Live Chat Messages
model LiveChatMessage {
  id          Int      @id @default(autoincrement())
  sessionId   Int      @map("session_id")
  senderId    String   @map("sender_id")
  content     String
  messageType String   @default("text") @map("message_type")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  session     LiveChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sender      UserProfile @relation("LiveChatSender", fields: [senderId], references: [userId])

  @@map("live_chat_messages")
}

// Advanced Teacher Tools

// Lessons
model Lesson {
  id          Int      @id @default(autoincrement())
  courseId    Int      @map("course_id")
  title       String
  description String?
  content     String
  duration    Int      @default(60) // minutes
  order       Int      @default(0)
  isActive    Boolean  @default(true) @map("is_active")
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  creator     UserProfile @relation("LessonCreator", fields: [createdBy], references: [userId])
  assignments Assignment[]
  materials   LessonMaterial[]

  @@map("lessons")
}

// Lesson Materials
model LessonMaterial {
  id          Int      @id @default(autoincrement())
  lessonId    Int      @map("lesson_id")
  title       String
  description String?
  fileUrl     String   @map("file_url")
  fileType    String   @map("file_type")
  fileSize    Int      @map("file_size")
  uploadedBy  String   @map("uploaded_by")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  lesson      Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  uploader    UserProfile @relation("MaterialUploader", fields: [uploadedBy], references: [userId])

  @@map("lesson_materials")
}

// Assignments
model Assignment {
  id          Int      @id @default(autoincrement())
  lessonId    Int      @map("lesson_id")
  title       String
  description String?
  dueDate     DateTime @map("due_date")
  maxScore    Int      @default(100) @map("max_score")
  isActive    Boolean  @default(true) @map("is_active")
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  lesson      Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  creator     UserProfile @relation("AssignmentCreator", fields: [createdBy], references: [userId])
  submissions AssignmentSubmission[]
  grades      Grade[]

  @@map("assignments")
}

// Assignment Submissions
model AssignmentSubmission {
  id            Int      @id @default(autoincrement())
  assignmentId  Int      @map("assignment_id")
  studentId     String   @map("student_id")
  content       String?
  fileUrl       String?  @map("file_url")
  submittedAt   DateTime @default(now()) @map("submitted_at")
  gradedAt      DateTime? @map("graded_at")
  score         Int?
  feedback      String?
  gradedBy      String?  @map("graded_by")

  // Relations
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student      UserProfile @relation("SubmissionStudent", fields: [studentId], references: [userId])
  grader       UserProfile? @relation("SubmissionGrader", fields: [gradedBy], references: [userId])

  @@unique([assignmentId, studentId])
  @@map("assignment_submissions")
}

// Grade Management
model Grade {
  id          Int      @id @default(autoincrement())
  studentId   String   @map("student_id")
  courseId    Int      @map("course_id")
  assignmentId Int?    @map("assignment_id")
  score       Int
  maxScore    Int      @default(100) @map("max_score")
  percentage  Decimal  @db.Decimal(5,2) @map("percentage")
  grade       String   // A, B, C, D, F
  comments    String?
  gradedBy    String   @map("graded_by")
  gradedAt    DateTime @default(now()) @map("graded_at")

  // Relations
  student     UserProfile @relation("GradeStudent", fields: [studentId], references: [userId])
  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  assignment  Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  grader      UserProfile @relation("GradeGrader", fields: [gradedBy], references: [userId])

  @@map("grades")
}

// Calendar Events
model CalendarEvent {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  eventType   String   @map("event_type") // lesson, session, assignment, exam
  courseId    Int?     @map("course_id")
  groupId     Int?     @map("group_id")
  createdBy   String   @map("created_by")
  isAllDay    Boolean  @default(false) @map("is_all_day")
  color       String   @default("#3b82f6")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  course      Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  group       StudyGroup? @relation(fields: [groupId], references: [id], onDelete: Cascade)
  creator     UserProfile @relation("EventCreator", fields: [createdBy], references: [userId])

  @@map("calendar_events")
}

// Technical Improvements

// Notifications
model Notification {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  title       String
  message     String
  type        String   @default("info") // info, success, warning, error
  isRead      Boolean  @default(false) @map("is_read")
  actionUrl   String?  @map("action_url")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user        UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("notifications")
}

// File Uploads
model FileUpload {
  id          Int      @id @default(autoincrement())
  fileName    String   @map("file_name")
  originalName String  @map("original_name")
  fileUrl     String   @map("file_url")
  fileType    String   @map("file_type")
  fileSize    Int      @map("file_size")
  uploadedBy  String   @map("uploaded_by")
  category    String   @default("general") // assignment, material, profile, etc.
  isPublic    Boolean  @default(false) @map("is_public")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  uploader    UserProfile @relation("FileUploader", fields: [uploadedBy], references: [userId])

  @@map("file_uploads")
}

// Search History
model SearchHistory {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  query       String
  category    String   @default("general") // courses, forums, library, etc.
  resultsCount Int     @default(0) @map("results_count")
  searchedAt  DateTime @default(now()) @map("searched_at")

  // Relations
  user        UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("search_history")
}

// Enums
enum UserRole {
  student
  teacher
  admin
}

enum LearningLevel {
  beginner
  intermediate
  advanced
}

enum ApplicationStatus {
  pending
  under_review
  approved
  rejected
}

enum GroupRole {
  admin
  moderator
  member
}
