// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Profiles - Extended user information
model UserProfile {
  id                Int      @id @default(autoincrement())
  userId            String   @unique @map("user_id")
  fullName          String   @map("full_name")
  email             String   @unique
  role              UserRole @default(student)
  learningLevel     LearningLevel @default(beginner) @map("learning_level")
  avatarUrl         String?  @map("avatar_url")
  bio               String?
  dateOfBirth       DateTime? @map("date_of_birth")
  location          String?
  phone             String?
  preferredLanguage String   @default("en") @map("preferred_language")
  timezone          String   @default("UTC")
  isActive          Boolean  @default(true) @map("is_active")
  emailVerified     Boolean  @default(false) @map("email_verified")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  teacherApplication TeacherApplication?
  userProgress      UserProgress[]
  groupMemberships  GroupMembership[]
  groupDiscussions  GroupDiscussion[]
  createdGroups     StudyGroup[] @relation("GroupCreator")
  createdCourses    Course[] @relation("CourseCreator")

  @@map("user_profiles")
}

// Teacher Applications
model TeacherApplication {
  id               Int      @id @default(autoincrement())
  userId           String   @unique @map("user_id")
  fullName         String   @map("full_name")
  email            String
  qualifications   String
  experienceYears  Int      @map("experience_years")
  teachingSubjects String[] @map("teaching_subjects")
  coverLetter      String   @map("cover_letter")
  status           ApplicationStatus @default(pending)
  rejectionReason  String?  @map("rejection_reason")
  appliedAt        DateTime @default(now()) @map("applied_at")
  reviewedAt       DateTime? @map("reviewed_at")
  reviewedBy       String?  @map("reviewed_by")

  // Relations
  user UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("teacher_applications")
}

// Courses
model Course {
  id             Int      @id @default(autoincrement())
  title          String
  description    String?
  level          LearningLevel @default(beginner)
  durationWeeks Int      @default(4) @map("duration_weeks")
  totalLessons  Int      @default(0) @map("total_lessons")
  thumbnailUrl  String?  @map("thumbnail_url")
  isActive       Boolean  @default(true) @map("is_active")
  createdBy      String   @map("created_by")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  creator UserProfile @relation("CourseCreator", fields: [createdBy], references: [userId])
  userProgress UserProgress[]

  @@map("courses")
}

// User Progress Tracking
model UserProgress {
  id                 Int      @id @default(autoincrement())
  userId             String   @map("user_id")
  courseId           Int      @map("course_id")
  progressPercentage Decimal  @default(0) @db.Decimal(5,2) @map("progress_percentage")
  completedLessons   Int      @default(0) @map("completed_lessons")
  totalLessons       Int      @default(0) @map("total_lessons")
  lastAccessed       DateTime @default(now()) @map("last_accessed")
  completedAt        DateTime? @map("completed_at")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relations
  user   UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  course Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("user_progress")
}

// Study Groups
model StudyGroup {
  id              Int      @id @default(autoincrement())
  name            String
  description     String?
  creatorId       String   @map("creator_id")
  learningLevel   LearningLevel @default(beginner) @map("learning_level")
  isPublic        Boolean  @default(true) @map("is_public")
  maxMembers      Int      @default(50) @map("max_members")
  currentMembers  Int      @default(0) @map("current_members")
  groupImageUrl   String?  @map("group_image_url")
  meetingSchedule String?  @map("meeting_schedule")
  meetingLink     String?  @map("meeting_link")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  creator         UserProfile @relation("GroupCreator", fields: [creatorId], references: [userId])
  memberships     GroupMembership[]
  discussions     GroupDiscussion[]

  @@map("study_groups")
}

// Group Memberships
model GroupMembership {
  id        Int      @id @default(autoincrement())
  groupId   Int      @map("group_id")
  userId    String   @map("user_id")
  role      GroupRole @default(member)
  joinedAt  DateTime @default(now()) @map("joined_at")
  isActive  Boolean  @default(true) @map("is_active")

  // Relations
  group StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_memberships")
}

// Group Discussions
model GroupDiscussion {
  id        Int      @id @default(autoincrement())
  groupId   Int      @map("group_id")
  userId    String   @map("user_id")
  content   String
  parentId  Int?     @map("parent_id")
  isPinned  Boolean  @default(false) @map("is_pinned")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  group     StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  parent    GroupDiscussion? @relation("DiscussionReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   GroupDiscussion[] @relation("DiscussionReplies")

  @@map("group_discussions")
}

// Live Sessions
model LiveSession {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  teacherId   String   @map("teacher_id")
  courseId    Int?     @map("course_id")
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  meetingLink String?  @map("meeting_link")
  maxStudents Int      @default(20) @map("max_students")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("live_sessions")
}

// Enums
enum UserRole {
  student
  teacher
  admin
}

enum LearningLevel {
  beginner
  intermediate
  advanced
}

enum ApplicationStatus {
  pending
  under_review
  approved
  rejected
}

enum GroupRole {
  admin
  moderator
  member
}
