import { useState, useEffect } from "react";
import { useNavigate } from "react-router";
import { supabase } from "../../lib/supabase";
import { 
  Users, 
  BookOpen, 
  MessageSquare,
  Settings,
  BarChart3,
  Shield,
  GraduationCap,
  Calendar
} from "lucide-react";

function AdminDashboardPage() {
  const [stats, setStats] = useState({
    totalUsers: 0,
    totalTeachers: 0,
    pendingApplications: 0,
    totalCourses: 0
  });
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    // Check if user is admin
    const checkAdminAccess = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        navigate('/account/signin');
        return;
      }

      const { data: profile } = await supabase
        .from('user_profiles')
        .select('role')
        .eq('user_id', user.id)
        .single();

      if (profile?.role !== 'admin') {
        navigate('/dashboard');
        return;
      }

      fetchStats();
    };

    checkAdminAccess();
  }, [navigate]);

  const fetchStats = async () => {
    try {
      // Fetch basic stats
      const [
        { count: totalUsers },
        { count: totalTeachers },
        { count: pendingApplications },
        { count: totalCourses }
      ] = await Promise.all([
        supabase.from('user_profiles').select('*', { count: 'exact', head: true }),
        supabase.from('user_profiles').select('*', { count: 'exact', head: true }).eq('role', 'teacher'),
        supabase.from('teacher_applications').select('*', { count: 'exact', head: true }).eq('status', 'pending'),
        supabase.from('courses').select('*', { count: 'exact', head: true })
      ]);

      setStats({
        totalUsers: totalUsers || 0,
        totalTeachers: totalTeachers || 0,
        pendingApplications: pendingApplications || 0,
        totalCourses: totalCourses || 0
      });
    } catch (error) {
      console.error('Error fetching stats:', error);
    } finally {
      setLoading(false);
    }
  };

  const adminCards = [
    {
      title: "Teacher Applications",
      description: "Review pending teacher applications",
      icon: <Shield className="h-8 w-8" />,
      count: stats.pendingApplications,
      color: "from-yellow-500 to-orange-500",
      href: "/admin/teacher-applications"
    },
    {
      title: "User Management",
      description: "Manage all platform users",
      icon: <Users className="h-8 w-8" />,
      count: stats.totalUsers,
      color: "from-blue-500 to-cyan-500",
      href: "/admin/users"
    },
    {
      title: "Course Management",
      description: "Manage courses and content",
      icon: <BookOpen className="h-8 w-8" />,
      count: stats.totalCourses,
      color: "from-green-500 to-emerald-500",
      href: "/admin/courses"
    },
    {
      title: "Analytics",
      description: "View platform analytics",
      icon: <BarChart3 className="h-8 w-8" />,
      count: null,
      color: "from-purple-500 to-pink-500",
      href: "/admin/analytics"
    }
  ];

  if (loading) {
    return (
      <div className="min-h-screen bg-[#0f172a] flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#06b6d4] mx-auto mb-4"></div>
          <p className="text-[#cbd5e1]">Loading admin dashboard...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[#0f172a] p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-white mb-2">Admin Dashboard</h1>
          <p className="text-[#cbd5e1]">Manage your Yoruba learning platform</p>
        </div>

        {/* Stats Overview */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div className="bg-[#1e293b] border border-[#334155] rounded-lg p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-[#94a3b8]">Total Users</p>
                <p className="text-2xl font-bold text-white">{stats.totalUsers}</p>
            </div>
              <div className="p-3 bg-blue-500/10 rounded-lg">
                <Users className="h-6 w-6 text-blue-500" />
        </div>
            </div>
          </div>

          <div className="bg-[#1e293b] border border-[#334155] rounded-lg p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-[#94a3b8]">Teachers</p>
                <p className="text-2xl font-bold text-white">{stats.totalTeachers}</p>
          </div>
              <div className="p-3 bg-green-500/10 rounded-lg">
                <GraduationCap className="h-6 w-6 text-green-500" />
        </div>
        </div>
      </div>

          <div className="bg-[#1e293b] border border-[#334155] rounded-lg p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-[#94a3b8]">Pending Applications</p>
                <p className="text-2xl font-bold text-white">{stats.pendingApplications}</p>
              </div>
              <div className="p-3 bg-yellow-500/10 rounded-lg">
                <Shield className="h-6 w-6 text-yellow-500" />
              </div>
            </div>
          </div>

          <div className="bg-[#1e293b] border border-[#334155] rounded-lg p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-[#94a3b8]">Total Courses</p>
                <p className="text-2xl font-bold text-white">{stats.totalCourses}</p>
              </div>
              <div className="p-3 bg-purple-500/10 rounded-lg">
                <BookOpen className="h-6 w-6 text-purple-500" />
              </div>
            </div>
          </div>
        </div>

        {/* Admin Actions */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {adminCards.map((card, index) => (
            <div
              key={index}
              onClick={() => navigate(card.href)}
              className="bg-[#1e293b] border border-[#334155] rounded-lg p-6 cursor-pointer hover:border-[#06b6d4] transition-colors group"
            >
              <div className="flex items-center gap-4 mb-4">
                <div className={`p-3 rounded-lg bg-gradient-to-r ${card.color}`}>
                  <div className="text-white">
                    {card.icon}
                  </div>
                </div>
                {card.count !== null && (
                  <div className="text-2xl font-bold text-white">
                    {card.count}
              </div>
                )}
              </div>
              <h3 className="text-lg font-semibold text-white mb-2 group-hover:text-[#06b6d4] transition-colors">
                {card.title}
              </h3>
              <p className="text-[#94a3b8] text-sm">
                {card.description}
              </p>
            </div>
          ))}
        </div>

        {/* Quick Actions */}
        <div className="mt-8 bg-[#1e293b] border border-[#334155] rounded-lg p-6">
          <h2 className="text-xl font-semibold text-white mb-4">Quick Actions</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <button
              onClick={() => navigate('/admin/teacher-applications')}
              className="flex items-center gap-3 p-4 bg-[#334155] hover:bg-[#475569] rounded-lg transition-colors"
            >
              <Shield className="h-5 w-5 text-yellow-500" />
              <span className="text-white">Review Applications</span>
              </button>
            <button
              onClick={() => navigate('/admin/users')}
              className="flex items-center gap-3 p-4 bg-[#334155] hover:bg-[#475569] rounded-lg transition-colors"
            >
              <Users className="h-5 w-5 text-blue-500" />
              <span className="text-white">Manage Users</span>
            </button>
            <button
              onClick={() => navigate('/admin/settings')}
              className="flex items-center gap-3 p-4 bg-[#334155] hover:bg-[#475569] rounded-lg transition-colors"
            >
              <Settings className="h-5 w-5 text-gray-500" />
              <span className="text-white">Platform Settings</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

export default AdminDashboardPage;